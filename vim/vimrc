" author: Werner Fink       <werner@suse.de>
" author: Florian La Roche  <florian@suse.de>
" version: 00/01/20
" commented lines start with `"'

" get easier to use and more user friendly vim defaults
" CAUTION: This option breaks some vi compatibility.
"          Switch it off if you prefer real vi compatibility
set nocompatible              " be iMproved, required

" enable syntax highlighting
syntax on

" automatically indent lines (default)
" set noautoindent

" select case-insenitiv search (not default)
set ignorecase

set number

" show cursor line and column in the status line
set ruler

" show matching brackets
set showmatch

" display mode INSERT/REPLACE/...
set showmode

" changes special characters in search patterns (default)
" set magic
if ! has('nvim')
    " Required to be able to use keypad keys and map missed escape sequences
    set esckeys
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set hlsearch

" Enable mouse usage (all modes)
set mouse=nic

" Do smart case matching
set smartcase

" Incremental search
set incsearch

" Disable swap file creation
set noswapfile

" Disable word wrap
set nowrap

set timeoutlen=1000 ttimeoutlen=0

set t_Co=256

" replace tab with spaces
set expandtab

set hidden
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

set tabstop=4

set shiftwidth=4

set smarttab
"Set one more char in the end of line
set virtualedit=onemore

" auto indent
set ai
" set <Leader> later as 'a'
let mapleader = "a"
" C-style indent
set cin
set clipboard=unnamedplus
" Case sensitive search
"set noic
" Fix cursor on center
set so=999
set path+=/usr/include/**
set path+=./**

"set tags=tags;/
set tags=/usr/include/tags
set tags+=./tags
"=====================================================
"" Vundle settings
"=====================================================
"" set the runtime path to include Vundle and initialize
set rtp+=~/dotFiles/vim/
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/vim-airline-themes/

filetype on
filetype plugin on
filetype plugin indent on

" Set color scheme
colorscheme fu_ex
so ~/dotFiles/vim/plugin_list.vim
so ~/dotFiles/vim/custom_functions.vim
so ~/dotFiles/vim/key_map.vim
so ~/dotFiles/vim/plugin_setup.vim

" disable tabs replacement for the specified filetypes
au FileType crontab,fstab,make set noexpandtab tabstop=8 shiftwidth=8

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

augroup vimrc_autocmds
    autocmd!
    autocmd FileType ruby,python,javascript,c,cpp set colorcolumn=0
    autocmd FileType ruby,python,javascript,c,cpp set nowrap
augroup END
" --- Python ---
"autocmd FileType python set completeopt-=preview " раскомментируйте, в случае, если не надо, чтобы jedi-vim показывал документацию по методу/классу
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
                                \ formatoptions+=croq softtabstop=4 smartindent
                                \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
autocmd FileType pyrex setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" --- JavaScript ---
let javascript_enable_domhtmlcss=1
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd BufNewFile,BufRead *.json setlocal ft=javascript

" --- HTML ---
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" --- template language support (SGML / XML too) ---
autocmd FileType html,xhtml,xml,htmldjango,htmljinja,eruby,mako setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd bufnewfile,bufread *.rhtml setlocal ft=eruby
autocmd BufNewFile,BufRead *.mako setlocal ft=mako
autocmd BufNewFile,BufRead *.tmpl setlocal ft=htmljinja
autocmd BufNewFile,BufRead *.py_tmpl setlocal ft=python
autocmd FileType html,htmldjango,htmljinja,eruby,mako let b:closetag_html_style=1

" --- CSS ---
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType css setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

" --- YUML ---
autocmd FileType yml,yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

autocmd BufWritePre * execute '%s/\s\+$//e'

if filereadable("./.vimrc_local")
    so ./.vimrc_local
endif

"Change cursor shape
if has('nvim')
      let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
      let $TMUX_TUI_ENABLE_SHELL_CURSOR=1
      set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
      let &t_SI .= "\e[6 q"
      let &t_EI .= "\e[0 q"
      autocmd VimLeave * silent !echo -ne "\<Esc>[0 q"
else
    if exists('$TMUX')
        " tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
        let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
        let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[0 q\<Esc>\\"
        autocmd VimLeave * silent !echo -ne "\<Esc>Ptmux;\<Esc>\<Esc>[0 q\033\\"
    else
        let &t_SI .= "\<Esc>[6 q"
        let &t_EI .= "\<Esc>[0 q"
        autocmd VimLeave * silent !echo -ne "\<Esc>[0 q"
    endif
endif

