" author: Werner Fink       <werner@suse.de> 
" author: Florian La Roche  <florian@suse.de> 
" version: 00/01/20
" commented lines start with `"'

" get easier to use and more user friendly vim defaults
" CAUTION: This option breaks some vi compatibility. 
"          Switch it off if you prefer real vi compatibility
set nocompatible              " be iMproved, required

" enable syntax highlighting
syntax on

" automatically indent lines (default)
" set noautoindent

" select case-insenitiv search (not default)
set ignorecase

set number

" show cursor line and column in the status line
set ruler

" show matching brackets
set showmatch

" display mode INSERT/REPLACE/...
set showmode

" changes special characters in search patterns (default)
" set magic
if ! has('nvim')
    " Required to be able to use keypad keys and map missed escape sequences
    set esckeys
endif

" allow backspacing over everything in insert mode 
set backspace=indent,eol,start

set hlsearch

" Enable mouse usage (all modes)
set mouse=a        

" Do smart case matching
set smartcase

" Incremental search
set incsearch 

" Disable swap file creation
set noswapfile

" Disable word wrap
set nowrap

set timeoutlen=1000 ttimeoutlen=0

set t_Co=256
    
" replace tab with spaces
set expandtab

set tabstop=4

set shiftwidth=4

set smarttab

" auto indent
set ai

" C-style indent
set cin
" Case sensitive search 
"set noic

set path+=/usr/include/**
set path+=./**

"set tags=tags;/
set tags=/usr/include/tags
set tags+=./tags

"=====================================================
"" Vundle settings
"=====================================================
"" set the runtime path to include Vundle and initialize
set rtp+=~/dotFiles/vim/
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/vim-airline-themes/
call vundle#begin()
    
    Plugin 'gmarik/Vundle.vim'      " let Vundle manage Vundle, required
    Plugin 'bufexplorer.zip'    
    Plugin 'ervandew/supertab'
    Plugin 'xterm-color-table.vim'
    Plugin 'noah/vim256-color'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'Yggdroot/indentLine'
    Plugin 'ctrlp.vim'
    Plugin 'fugitive.vim'
    "Plugin 'Syntastic'
    Plugin 'easymotion/vim-easymotion'
    map  ? <Plug>(easymotion-sn)
    omap ? <Plug>(easymotion-tn)
    map l <Plug>(easymotion-lineforward)
    map k <Plug>(easymotion-j)
    map i <Plug>(easymotion-k)
    map j <Plug>(easymotion-linebackward)
    map  <M-x> <Plug>(easymotion-bd-f2)
    nmap <M-x> <Plug>(easymotion-overwin-f2)
    let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
   
    "---------=== Code/project navigation ===-------------
    Plugin 'scrooloose/nerdtree'           " Project and file navigation
    Plugin 'majutsushi/tagbar'             " Class/module browser
    "
    ""------------------=== Other ===----------------------
    Plugin 'bling/vim-airline'              " Lean & mean status/tabline for vim
    Plugin 'fisadev/FixedTaskList.vim'      " Pending tasks list
    Plugin 'rosenfeld/conque-term'          " Consoles as buffers
    Plugin 'tpope/vim-surround'            " Parentheses, brackets, quotes, XML tags, and more

    "--------------=== Snippets support ===---------------
    Plugin 'garbas/vim-snipmate'            " Snippets manager
    Plugin 'MarcWeber/vim-addon-mw-utils'   " dependencies #1
    Plugin 'tomtom/tlib_vim'                " dependencies #2
    Plugin 'honza/vim-snippets'             " snippets repo
    "
    ""---------------=== Languages support ===-------------
    " --- Python ---
    Plugin 'klen/python-mode'               " Python mode (docs, refactor,
                                            "  lints, highlighting, run and ipdb and more)
    Plugin 'davidhalter/jedi-vim'           " Jedi-vim autocomplete plugin
    Plugin 'mitsuhiko/vim-jinja'            " Jinja support for vim
    Plugin 'mitsuhiko/vim-python-combined'  " Combined Python 2/3 for Vim

call vundle#end()                    " required

filetype on
filetype plugin on
filetype plugin indent on

" Set color scheme
colorscheme fu_ex

" disable tabs replacement for the specified filetypes
au FileType crontab,fstab,make set noexpandtab tabstop=8 shiftwidth=8

augroup vimrc_autocmds
    autocmd!
    autocmd FileType ruby,python,javascript,c,cpp set colorcolumn=0
    autocmd FileType ruby,python,javascript,c,cpp set nowrap
augroup END


set laststatus=2
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_exclude_preview=1


"**********************************************************************************************************************
" NERDTree
let g:NERDTreeBookmarksFile = expand('%:p:h')."/.BookMarks"

"**********************************************************************************************************************
" Tilst_settings
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Sort_Type = "name"
"**********************************************************************************************************************
"=====================================================
" Languages support
"=====================================================
" --- Python ---
"autocmd FileType python set completeopt-=preview " раскомментируйте, в случае, если не надо, чтобы jedi-vim показывал документацию по методу/классу
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
                                \ formatoptions+=croq softtabstop=4 smartindent
                                \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
autocmd FileType pyrex setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" --- JavaScript ---
let javascript_enable_domhtmlcss=1
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd BufNewFile,BufRead *.json setlocal ft=javascript

" --- HTML ---
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" --- template language support (SGML / XML too) ---
autocmd FileType html,xhtml,xml,htmldjango,htmljinja,eruby,mako setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd bufnewfile,bufread *.rhtml setlocal ft=eruby
autocmd BufNewFile,BufRead *.mako setlocal ft=mako
autocmd BufNewFile,BufRead *.tmpl setlocal ft=htmljinja
autocmd BufNewFile,BufRead *.py_tmpl setlocal ft=python
autocmd FileType html,htmldjango,htmljinja,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,htmljinja,eruby,mako source ~/.vim/scripts/closetag.vim

" --- CSS ---
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType css setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

" --- YUML ---
autocmd FileType yml,yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2

let html_no_rendering=1
let g:closetag_default_xml=1
let g:sparkupNextMapping='<c-l>'

"=====================================================
" Python-mode settings
"=====================================================
" Disable python code auto complete (will use jedi-vim) 
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0

" Code checking for python (Lint)
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
let g:pymode_lint_ignore="E501,W601,C0110,W391,E221"
let g:pymode_lint_cwindow = 1
" Disable python Lint on write
let g:pymode_lint_on_write = 1

" virtualenv support
let g:pymode_virtualenv = 1

" Set of breakpoints in python
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" Python syntax
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Disable autofold in python code
let g:pymode_folding = 0

" Support of run of python code
let g:pymode_run = 0
let g:pymode_run_bind = '<leader>r'

let g:pymode_doc = 0
let g:pymode_doc_bind = ''

" ------------------------------------------------------------------------------
" JEDI settings
" ------------------------------------------------------------------------------
let g:jedi#popup_select_first = 1
let g:jedi#show_call_signatures = 0
let g:jedi#auto_close_doc = 1
set splitbelow
let g:jedi#goto_command = '<leader>d'

" ------------------------------------------------------------------------------
" This function finds the first definition of the function/class under the
" cursor. It produces an error if the definition is not in a Python file.
let g:jedi#goto_assignments_command = '<leader>g'

function! jedi#add_goto_window(len) abort
    set lazyredraw
    cclose
    let height = g:jedi#quickfix_window_height
    execute 'belowright copen '.height
    set nolazyredraw
    if g:jedi#use_tabs_not_buffers == 1
        noremap <buffer> <CR> :call jedi#goto_window_on_enter()<CR>
    endif
    augroup jedi_goto_window
      au!
      au WinLeave <buffer> q  " automatically leave, if an option is chosen
    augroup END
    redraw!
endfunction

"------------------------------------------------------------------------------
"This shows the pydoc documentation for the item currently under the cursor.
"The documentation is opened in a horizontally split buffer. The height of this
"buffer is controlled by `g:jedi#max_doc_height` (set by default to 30).

let g:jedi#documentation_command = '<leader>k'

"------------------------------------------------------------------------------
"Jedi-vim deletes the word currently under the cursor and puts Vim in insert
"mode, where the user is expected to enter the new variable name. Upon leaving
"insert mode, jedi-vim then renames all occurences of the old variable name
"with the new one. The number of performed renames is displayed in the command
"line.

let g:jedi#rename_command = '<leader>r'

"------------------------------------------------------------------------------
"The quickfix window is populated with a list of all names which point to the
"definition of the name under the cursor.

let g:jedi#usages_command = '<leader>]'

let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CloseOnEnd = 0
let g:indentLine_color_term = 236
let g:indentLine_char = '┋'
"**********************************************************************************************************************
"                       KEY MAPPING
"**********************************************************************************************************************
" Fix for key combinations with ALT
for i in range(97,122)
    let c = nr2char(i)
    exec "map \e".c." <M-".c.">"
    exec "map! \e".c." <M-".c.">"
endfor
"**********************************************************************************************************************
" Window management
"**********************************************************************************************************************
" Navigation keys
" map for visual, normal, select modes
noremap  <M-i> <Up>
noremap  <M-j> <Left>
noremap  <M-k> <Down>
noremap  <M-l> <Right>

" map! for insert, command modes
noremap! <M-i> <Up>
noremap! <M-j> <Left>
noremap! <M-k> <Down>
noremap! <M-l> <Right>

if ! has('nvim')
    noremap I 10<Up>
    noremap J B
    noremap K 10<Down>
    noremap L w

    noremap! I <C-o>10<Up>
    noremap! J <C-o>B
    noremap! K <C-o>10<Down>
    noremap! L <C-o>w
else
    noremap <M-I> 10<Up>
    noremap <M-J> B
    noremap <M-K> 10<Down>
    noremap <M-L> w

    noremap! <M-I> <C-o>10<Up>
    noremap! <M-J> <C-o>B
    noremap! <M-K> <C-o>10<Down>
    noremap! <M-L> <C-o>w
endif

" Find key
nnoremap <M-q> *N
inoremap <M-q> <C-o>*
"""""""""""""""""""""""""""""""""""""
"Edit keys
"""""""""""""""""""""""""""""""""""""
" Copy
vnoremap <M-u> yi
" Paste
inoremap <M-o> <C-o>p
nnoremap <M-o> p
"Paste mode
nnoremap <M-p> :set invpaste paste?<CR>
set pastetoggle=<M-p>
set showmode

" Backspace
noremap  <M-d> d<Left>i
noremap! <M-d> <Backspace>
" DELETE
noremap  <M-f>  d<Right>i
noremap! <M-f> <Del>

" Undo
nnoremap <M-e> u
inoremap <M-e> <C-o>u

" Redo
nnoremap <M-r> <C-r>
inoremap <M-r> <C-o><C-r>

" Spell suggestions
inoremap <M-n> <C-x>s
"""""""""""""""""""""""""""""""""""""
" Select modes
"""""""""""""""""""""""""""""""""""""
nnoremap <M-c> i

" To Normal mode
if ! has('nvim')
    vnoremap c <ESC>
    noremap! c <Right><ESC>
    onoremap c <ESC>
else
    vnoremap <M-c> <ESC>
    noremap! <M-c> <Right><ESC>
    onoremap <M-c> <ESC>
endif

" To Visual mode
function! ChangeVisualModInLoop()
    let l:current_mode = mode()
    let l:next_mode = l:current_mode 
    set noignorecase
    echo l:current_mode
    if 'V' == l:current_mode
        let l:next_mode = 'v'
    endif
    if '' == l:current_mode
        let l:next_mode = 'V'
    endif
    if 'v' == l:current_mode
        let l:next_mode = ''
    endif
    if 'i' == l:current_mode
        let l:next_mode = "\<ESC>\<Right>V"
    endif
    if 'n' == l:current_mode
        let l:next_mode = 'V'
    endif
    set ignorecase
    return l:next_mode
endfunction

vnoremap <expr> <M-v>  ChangeVisualModInLoop()
inoremap <expr> <M-v>  ChangeVisualModInLoop()
nnoremap <expr> <M-v>  ChangeVisualModInLoop()
nnoremap <M-u>         bve
inoremap <M-u>         <ESC>bve

"resizing of panel
nmap <silent> ( <C-W><
nmap <silent> ) <C-W>>
nmap <silent> + <C-W>+
nmap <silent> _ <C-W>-

"navigation between panels

if ! has('nvim')
    inoremap <silent> wj   <C-o>:wincmd h <CR>
    inoremap <silent> wl   <C-o>:wincmd l <CR>
    inoremap <silent> wi   <C-o>:wincmd k <CR>
    inoremap <silent> wk   <C-o>:wincmd j <CR>
    inoremap <silent> ws   <C-o>:wincmd s <CR>
    inoremap <silent> wv   <C-o>:wincmd v <CR>
    inoremap <silent> wq   <C-o>:q <CR>

    noremap <silent> wj    :wincmd h <CR>
    noremap <silent> wl    :wincmd l <CR>
    noremap <silent> wi    :wincmd k <CR>
    noremap <silent> wk    :wincmd j <CR>
    noremap <silent> ws    :wincmd s <CR>
    noremap <silent> wv    :wincmd v <CR>
    noremap <silent> wq    :q <CR>
else
    inoremap <silent> <M-w><M-j>   <C-o>:wincmd h <CR>
    inoremap <silent> <M-w><M-l>   <C-o>:wincmd l <CR>
    inoremap <silent> <M-w><M-i>   <C-o>:wincmd k <CR>
    inoremap <silent> <M-w><M-k>   <C-o>:wincmd j <CR>
    inoremap <silent> <M-w><M-s>   <C-o>:wincmd s <CR>
    inoremap <silent> <M-w><M-v>   <C-o>:wincmd v <CR>
    inoremap <silent> <M-w><M-q>   <C-o>:q <CR>

    noremap <silent> <M-w><M-j>    :wincmd h <CR>
    noremap <silent> <M-w><M-l>    :wincmd l <CR>
    noremap <silent> <M-w><M-i>    :wincmd k <CR>
    noremap <silent> <M-w><M-k>    :wincmd j <CR>
    noremap <silent> <M-w><M-s>    :wincmd s <CR>
    noremap <silent> <M-w><M-v>    :wincmd v <CR>
    noremap <silent> <M-w><M-q>    :q <CR>
endif

imap     <silent> <C-W>         <C-o><C-w>
vnoremap <silent> <C-W><Up>     <C-W><Up>
vnoremap <silent> <C-W><Down>   <C-W><Down>
vnoremap <silent> <C-W><Right>  <C-W><Right>
vnoremap <silent> <C-W><Left>   <C-W><Left>

map <silent> <C-\>v  :Ag<CR>

map <silent> <F1>       :TaskList<CR>
"Open/close directory tree
map <silent> <F2>       :NERDTreeToggle<cr>
imap <silent> <F2>      <ESC>:NERDTreeToggle<cr>
"Open/close the list of opened buffersw
map <silent> <F3>       :BufExplorer<cr>
imap <silent> <F3>      <ESC>:BufExplorer<cr>
"Open/clode the list of Tags in the current buffer
map <silent> <F4>       :TagbarToggle <CR>

" Key for manual check of python code
augroup python_autocmds
    autocmd!
    autocmd FileType python map <silent> <buffer> <leader>c :PymodeLint<CR>
    autocmd FileType python PymodeLint
    autocmd FileType python nnoremap <F5> :ConqueTermSplit ipython<CR>
    autocmd FileType python nnoremap <F6> :exe "ConqueTermSplit ipython " . expand("%")<CR>
augroup END

"On/Off spell check
nnoremap <F7>            :set spell! spell?<CR> 
inoremap <F7>            <C-o>:set spell! spell?<CR>

"On/off higlight of serach results
nnoremap <F8>            :noh<CR>
inoremap <F8>            <C-o>:noh<CR>

"build of cscope DB
map <silent> <F11>  :cs reset <CR> 
map <silent> <F12>  :! ~/dotFiles/vim/cscope_build.sh -f ../cscope.paths & <CR>

"save file
nnoremap <silent> <M-s>     :w! <CR>
inoremap <silent> <M-s>     <ESC>:w! <CR>i
inoremap <silent> <Insert>  <ESC>
"**********************************************************************************************************************
" OmniCppComplete
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
"let OmniCpp_MayCompleteDot = 1 " autocomplete after .
"let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
"let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
"set complete-=i
" " automatically open and close the popup menu / preview window
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest,preview
"autocmd FileType cpp set omnifunc=omni#cpp#complete#Main
"autocmd FileType c set omnifunc=ccomplete#Complete
"**********************************************************************************************************************
" Complete longest common string, then each full match
" enable this for bash compatible behaviour
" set wildmode=longest,full

"/etc/vimrc ends here 
