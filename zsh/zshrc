stty -ixon

test -s ~/.alias && . ~/.alias || true
export DEVEL_DIR=~/devel/ 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/
export GOROOT=$HOME/go1.X
export CABALROOT=$HOME/.cabal
export cabal_helper_libexecdir=$CABALROOT/x86_64-linux-ghc-8.0.2/cabal-helper-0.7.3.0/
export PATH=$PATH:$GOROOT/bin:/usr/local/sbin:/usr/sbin:$CABALROOT/bin:$HOME/.local/bin

export NO_AWT_MITSHM=true
export CSHEDIT=vim
if [ "$TMUX" = "" ]
then
    export TERM=xterm-256color
fi

autoload -Uz promptinit                                                                                                                                      
autoload -U colors && colors                                                                                                                                 
promptinit                                                                                                                                                   
                                                                                                                                                             
autoload -U select-word-style                                                                                                                                
select-word-style bash                                                                                                                                      

#Keep 1000 lines of history within the shell and save it to ~/.zsh_history: 
HISTSIZE=10000                                                               
SAVEHIST=10000                                                               
HISTFILE=~/.zsh_history

export VISUAL='nvim' 
export EDITOR="$VISUAL"

source ~/antigen.zsh
# Load the oh-my-zsh's library.
antigen use oh-my-zsh
# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle heroku
antigen bundle pip
antigen bundle lein
antigen bundle command-not-found
# Syntax highlighting bundle.
antigen bundle zsh-users/zsh-syntax-highlighting
# Load the theme.
antigen theme gnzh
# Tell antigen that you're done.
antigen apply

alias ls='ls --color=auto'                                                   
alias la='ls -A'                                                             
alias l='ls -lah'
alias ps='ps auxf'
alias grep='grep --color -n'                                             
alias df='df -h'
alias vim='nvim'
alias todo='nvim ~/TODO_Items'
alias t='tree -h' 
alias tf='tree -f' 
alias ta='tree -ha'
alias df='findmnt'


# Use modern completion system                                                                        
autoload -Uz compinit                                                                                 

# Key maping:
# Help:
#   type bindkey in zsh shell and you'll see list of bound 
#   keys.
bindkey "^[l" forward-char
bindkey "^[j" backward-char
bindkey "^[i" up-line-or-search
bindkey "^[k" down-line-or-search
bindkey "^[L" forward-word
bindkey "^[J" backward-word
bindkey "^[f" delete-char
bindkey "^[d" backward-delete-char                                                           


## NET ###############################################################
host.net.public_ip() {
    ip -o addr show dev $(host.net.public_netdev) | grep 'inet ' | sed -e 's/.* inet \([^/]*\)\/.*/\1/'
}
host.net.ips(){
    ip -o addr | grep 'inet ' | sed -e 's/.* inet \([^/]*\)\/.*/\1/'
}
host.net.public_netdev(){
    route | egrep '^default' | head -1 | awk '{print $NF}'
}
host.net.names (){
    hostname -A | tr ' ' '\n'
}
## MEMO ###############################################################
host.memo.swap.off(){
    sudo swapoff -a
}
host.memo.swap.on(){
    sudo swapon -a
}
## TOOLS ###############################################################
tools.top(){
    htop $@
}
tools.editor(){
    vim $@
}
tools.notify(){
    ntfy $@
}
tools.notify.info(){
    tools.notify -t "Info:" send "$@"
}
tools.notify.message(){
    tools.notify -t "Message:" send "$@"
}
tools.notify.failed(){
    tools.notify -t "Failed:"  send "$@"
}
tools.notify.success(){
    tools.notify -t "Success:" send "$@"
}
tools.mount_tree(){
    findmnt
}
tools.ssh.get_pub_key(){
    local ssh_pub_key_file=~/.ssh/id_rsa.pub 
    if ! [[ -f $ssh_pub_key_file ]]; then
        ssh-keygen -t rsa -b 4096
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
    fi
    cat $ssh_pub_key_file
}
## DOCKER ###############################################################
docker.start(){
    docker start $@
}
docker.stop(){
    docker stop $@
}
docker.pull(){
    docker pull $@
}
docker.exec(){
    docker exec -it $@
}
docker.run(){
    docker run $@
}
docker.rm(){
    docker rm -f $1
}
docker.rm(){
    docker rm -f $1
}
docker.ps(){
    docker ps -a
}
docker.pid(){
    docker inspect --format '{{ .State.Pid }}' "$@"
}
docker.ip(){
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}
docker.images(){
    docker images
}
## TensorFlow Ddcker ####################################################
TF_CONTAINER=tensorflow
tf.docker.run() {                                                                                    
    local TAG=nightly-py3-jupyter                                                                    
    local SOURCEDIR=$(realpath $DEVEL_DIR)/tensor_flow/src                                           
    local SHAREDIR=$(realpath $DEVEL_DIR)/tensor_flow/share                                          
    if [ ! "$(docker ps -q -f name=$TF_CONTAINER)" ]; then                                           
        if [ ! "$(docker ps -aq -f status=exited -f name=$TF_CONTAINER)" ]; then                     
            tf.docker.update                                                                         
            mkdir -p $SOURCEDIR $SHAREDIR                                                            
            docker.run -d \
                -u $(id -u):$(id -g) \
                -v $SOURCEDIR:/tf/src \
                -v $SHAREDIR:/tf/share \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e DISPLAY=${DISPLAY} \
                --publish 8888:8888/tcp \
                --dns 10.44.0.1 \
                --device /dev/snd \
                --ipc host \
                --name $TF_CONTAINER \
                tensorflow/$TF_CONTAINER:$TAG /bin/sh -c "while true; do sleep 1000000; done"     
        else                                                                                         
            tf.docker.start                                                                          
        fi                                                                                           
    fi                                                                                               
}                                                                                                    
###################################################################################################  
tf.docker.exec() {                                                                                   
    if [ ! "$(docker ps -q -f name=$TF_CONTAINER)" ]; then                                           
        tf.docker.run                                                                                
    fi                                                                                               
    docker.exec $TF_CONTAINER $@                                                                     
}                                                                                                    
tf.docker.jupyter() {                                                                                   
    tf.docker.exec bash -c "jupyter-notebook --ip $(docker.ip $TF_CONTAINER)"                                                        
}                                                                                                    
#################################################################                                    
tf.docker.update() {                                                                                 
    local TAG=nightly-py3-jupyter                                                                    
    docker.pull tensorflow/$TF_CONTAINER:$TAG                                                        
}                                                                                                    
#################################################################                                    
tf.docker.start() {                                                                                  
    docker.start $TF_CONTAINER                                                                       
}                                                                                                    
#################################################################                                    
tf.docker.stop() {                                                                                   
    docker.stop $TF_CONTAINER                                                                        
}                                                                                                    
#################################################################                                    
tf.docker.rm() {                                                                                     
    docker.rm $TF_CONTAINER                                                                          
}                                                                                                    
## CONFIG ###############################################################
config.zsh.common(){
    tools.editor ~/.zshrc
}
config.zsh.local(){
    tools.editor ~/.zshrc_custom.zsh    
}
config.ntfy(){
    mkdir -p ~/.config/ntfy/
    tools.editor .config/ntfy/ntfy.yml    
}
config.tmux(){
    tools.editor ~/.tmux.conf
}
config.vim.common(){
    tools.editor ~/.vimrc
}
config.vim.local(){
    tools.editor ./.vimrc_local
}
config.vim.key_map(){
    tools.editor ./dotFiles/vim/key_map.vim
}
config.vim.plugins(){
    tools.editor ./dotFiles/vim/plugin_list.vim
}
config.vim.plugin_config(){
    tools.editor ./dotFiles/vim/plugin_config.vim
}
config.deply.setup(){
    tools.editor ./dotFiles/setup.sh
}

source ~/.zshrc_custom.zsh

