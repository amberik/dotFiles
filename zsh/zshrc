stty -ixon

test -s ~/.alias && . ~/.alias || true

export USER_PATH=$HOME/.local/bin/
export USER_LD_LIBRARY_PATH=$HOME/.local/lib/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/:$USER_LD_LIBRARY_PATH
export PATH=$PATH:/usr/local/sbin:/usr/sbin:$USER_PATH
# Go language
export GOROOT=/usr/lib/go
export PATH=$PATH:$GOROOT/bin/
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin/
# Haskell language
export CABALROOT=$HOME/.cabal
export PATH=$PATH:$CABALROOT/bin/
export cabal_helper_libexecdir=$CABALROOT/x86_64-linux-ghc-8.0.2/cabal-helper-0.7.3.0/

export DEVEL_DIR=~/devel/


export VISUAL='nvim'
export CSHEDIT="$VISUAL"
export EDITOR="$VISUAL"
export NO_AWT_MITSHM=true

if [ "$TMUX" = "" ]
then
    export TERM=xterm-256color
fi

autoload -Uz promptinit
autoload -U colors && colors
promptinit

autoload -U select-word-style
select-word-style bash

#Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

source ~/antigen.zsh
# Load the oh-my-zsh's library.
antigen use oh-my-zsh
# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle heroku
antigen bundle pip
antigen bundle lein
antigen bundle command-not-found
# Syntax highlighting bundle.
antigen bundle zsh-users/zsh-syntax-highlighting
# Load the theme.
antigen theme gnzh
# Tell antigen that you're done.
antigen apply

alias ls='ls --color=auto'
alias la='ls -A'
alias l='ls -lah'
alias ps='ps auxf'
alias grep='grep --color -n'
alias df='df -h'
alias vim='nvim'
alias todo='nvim ~/TODO_Items'
alias usefull='nvim ~/USEFULL_Items'
alias notes='nvim ~/MyNotes'
alias t='tree -h'
alias tf='tree -f'
alias ta='tree -ha'
alias df='findmnt'
alias df='less -FRSX'


# Use modern completion system
autoload -Uz compinit

# Key maping:
# Help:
#   type bindkey in zsh shell and you'll see list of bound
#   keys.
bindkey "^[l" forward-char
bindkey "^[j" backward-char
bindkey "^[i" up-line-or-search
bindkey "^[k" down-line-or-search
bindkey "^[L" forward-word
bindkey "^[J" backward-word
bindkey "^[f" delete-char
bindkey "^[d" backward-delete-char


## NET ###############################################################
host.net.public_ip() {
    ip -o addr show dev $(host.net.public_netdev) | grep 'inet ' | sed -e 's/.* inet \([^/]*\)\/.*/\1/'
}
host.net.ips(){
    ip -o addr | grep 'inet ' | sed -e 's/.* inet \([^/]*\)\/.*/\1/'
}
host.net.public_netdev(){
    route | egrep '^default' | head -1 | awk '{print $NF}'
}
host.net.names (){
    hostname -A | tr ' ' '\n'
}
## MEMO ###############################################################
host.memo.swap.off(){
    sudo swapoff -a
}
host.memo.swap.on(){
    sudo swapon -a
}
host.setup(){
    sudo apt update
    sudo apt install -y python3-pip cgdb heaptrack heaptrack-gui
    #pip2 install ipython jupyter matplotlib ipywidgets opencv-python pythreejs Pillow tensorflow
    pip3 install ipython jupyter matplotlib ipywidgets opencv-python pythreejs Pillow tensorflow gdbgui
    jupyter nbextension enable --py widgetsnbextension
    jupyter nbextension install --py --symlink --user pythreejs
    jupyter nbextension enable pythreejs --user --py
}
## TOOLS ###############################################################
tools.top(){
    htop $@
}
tools.editor(){
    vim $@
}
tools.perf(){
    local perf_event_paranoid_val=$(cat /proc/sys/kernel/perf_event_paranoid)
    if [ "$perf_event_paranoid_val" != "-1" ]
    then
      echo -1 | sudo  tee /proc/sys/kernel/perf_event_paranoid
    fi
    sudo perf $@
}
tools.notify(){
    local TITLE=$1
    shift
    ntfy -t ${TITLE:q} send "$@"
}
tools.notify.info(){
    tools.notify -t "Info:"  "$@"
}
tools.notify.message(){
    tools.notify "Message:" "$@"
}
tools.notify.failed(){
    tools.notify "Failed:" "$@"
}
tools.notify.success(){
    tools.notify "Success:" "$@"
}
tools.mount_tree(){
    findmnt
}
tools.ssh.get_pub_key(){
    local ssh_pub_key_file=~/.ssh/id_rsa.pub
    if ! [[ -f $ssh_pub_key_file ]]; then
        ssh-keygen -t rsa -b 4096
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
    fi
    cat $ssh_pub_key_file
}
## DOCKER ###############################################################
docker.start(){
    docker start $@
}
docker.stop(){
    docker stop $@
}
docker.pull(){
    docker pull $@
}
docker.exec(){
    docker exec -it $@
}
docker.run(){
    docker run $@
}
docker.rm(){
    docker rm -f $1
}
docker.ps(){
    docker ps -a
}
docker.pid(){
    docker inspect --format '{{ .State.Pid }}' "$@"
}
docker.ip(){
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$@"
}
docker.images(){
    docker images
}
## TensorFlow Ddcker ####################################################
TF_CONTAINER=tensorflow
tf.docker.run() {
    local TAG=nightly-py3-jupyter
    local SOURCEDIR=$(realpath $DEVEL_DIR)/tensor_flow/src
    local SHAREDIR=$(realpath $DEVEL_DIR)/tensor_flow/share
    if [ ! "$(docker ps -q -f name=$TF_CONTAINER)" ]; then
        if [ ! "$(docker ps -aq -f status=exited -f name=$TF_CONTAINER)" ]; then
            tf.docker.update
            mkdir -p $SOURCEDIR $SHAREDIR
            docker.run -d \
                -u $(id -u):$(id -g) \
                -v $SOURCEDIR:/tf/src \
                -v $SHAREDIR:/tf/share \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e DISPLAY=${DISPLAY} \
                --publish 8888:8888/tcp \
                --dns 10.44.0.1 \
                --device /dev/snd \
                --ipc host \
                --name $TF_CONTAINER \
                tensorflow/$TF_CONTAINER:$TAG /bin/sh -c "while true; do sleep 1000000; done"
        else
            tf.docker.start
        fi
    fi
}
###################################################################################################
tf.docker.exec() {
    if [ ! "$(docker ps -q -f name=$TF_CONTAINER)" ]; then
        tf.docker.run
    fi
    docker.exec $TF_CONTAINER $@
}
tf.docker.jupyter() {
    tf.docker.exec bash -c "jupyter-notebook --ip $(docker.ip $TF_CONTAINER)"
}
#################################################################
tf.docker.update() {
    local TAG=nightly-py3-jupyter
    docker.pull tensorflow/$TF_CONTAINER:$TAG
}
#################################################################
tf.docker.start() {
    docker.start $TF_CONTAINER
}
#################################################################
tf.docker.stop() {
    docker.stop $TF_CONTAINER
}
#################################################################
tf.docker.rm() {
    docker.rm $TF_CONTAINER
}
## CONFIG ###############################################################
config.zsh.common(){
    tools.editor ~/.zshrc
}
config.zsh.local(){
    tools.editor ~/.zshrc_custom.zsh
    . ~/.zshrc_custom.zsh
}
config.ntfy(){
    mkdir -p ~/.config/ntfy/
    tools.editor .config/ntfy/ntfy.yml
}
config.tmux(){
    tools.editor ~/.tmux.conf
}
config.vim.common(){
    tools.editor ~/.vimrc
}
config.vim.local(){
    tools.editor ./.vimrc_local
}
config.vim.key_map(){
    tools.editor ~/dotFiles/vim/key_map.vim
}
config.vim.plugins(){
    tools.editor ~/dotFiles/vim/plugin_list.vim
}
config.vim.plugin_config(){
    tools.editor ~/dotFiles/vim/plugin_setup.vim
}
config.deply.setup(){
    tools.editor ~/dotFiles/setup.sh
}


################################################################################################
# FZF
################################################################################################
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_ALT_R_OPTS="--preview 'tree -C {} | head -200'"
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS' --bind alt-k:down,alt-i:up'
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
#Command history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# fuzzy grep open via ag with line number
vg() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}



fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}


# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi) || return
  git checkout $(awk '{print $2}' <<<"$target" )
}


# fco_preview - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
fco_preview() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# fcoc - checkout git commit
fcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

source ~/.zshrc_custom.zsh
